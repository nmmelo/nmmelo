# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/yum_module.html
# https://www.toptechskills.com/ansible-tutorials-courses/ansible-yum-module-tutorial-examples/
# https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_tags.html
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/dnf_module.html
# https://4sysops.com/archives/ansible-yum-module-install-the-rhelcentos-packages/
#https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_conditionals.html

---
- name: Set ansible_facts
  ansible.builtin.set_fact:
    files_dicts: "{{ server }}"
  tags:
    - teste

- name: Delete old kernel version
  debug:
    msg: "{{ files_dicts }}"
  tags:
    - teste

- name: Check /boot freespace
  ansible.builtin.shell:
   cmd: df /boot --output\=avail | tail -1
  register: boot_freespace
  when: ansible_facts['distribution'] == "OracleLinux" or ansible_distribution == 'Ubuntu'
  #loop: "{{ server }}"
  #hen: inventory_hostname == item.hostname
  ##when: "{{ server|selectattr('hostname', 'in', inventory_hostname )}}"
  tags:
    - boot-size

- name: Delete old kernel version
  debug:
    msg: /tmp does not have the minimum space required to continue (30 MB requested) "{{ boot_freespace.stdout }}"   
  when: inventory_hostname == item.hostname
  with_items: "{{ server }}"
  #when: boot_freespace.stdout|float is lt 30000 and ansible_facts['distribution'] == "OracleLinux"
  #failed_when: "'error' boot_freespace.stdout"
  ignore_errors: true
  tags:
    - boot-size

- name: Debian Patch - autoremove no longer needed dependencies
  ansible.builtin.apt:
    autoremove: true 
  when: boot_freespace.stdout|float is lt 30000 and ansible_os_family == 'Debian'
  ignore_errors: true

- name: Debian Patch - autoclean the local package files 
  ansible.builtin.apt:
    autoclean: true
  when: boot_freespace.stdout|float is lt 30000 and ansible_os_family == 'Debian'
  ignore_errors: true

- name: SISOP | Remove Old Kernel Version
  include_tasks: remove-old-kernel.yml
  when: boot_freespace.stdout|float is lt 30000 and ansible_facts['distribution'] == "OracleLinux"
  ignore_errors: true
  tags:
    - boot-size

- name: Update Redhat Distribution | By YUM
  ansible.builtin.yum:
     name: "*"
     state: latest
     update_cache: yes
     nobest: true # Set best option to False, so that transactions are not limited to best candidates only.
     bugfix: true #If set to true, and state=latest then only installs updates that have been marked bugfix related.
     security: false  #If set to true, and state=latest then only installs updates that have been marked security related.
  register: yum_output
  when: ansible_distribution == 'CentOS' or ansible_os_family == 'RedHat'
  tags:
   - update-redhat

- name: Print output Update Redhat | Debug mode with var
  ansible.builtin.debug: 
   var: yum_output
  when: ansible_distribution == 'CentOS' or ansible_os_family == 'RedHat' and yum_output.rc != 0
  tags:
   - print-debug-output
   - update-redhat

- name: Update Kernel | By YUM
  ansible.builtin.yum:
    name: 'kernel*'
    state: latest
    nobest: true
    update_only: yes
    update_cache: true
  when: ansible_distribution == 'CentOS' or ansible_os_family == 'RedHat'
  tags:
   - update-redhat-kernel

- name: Update All Packages | By Shell
  ansible.builtin.shell:
   cmd: yum update --nobest -y
  register: shell_output
  when: ansible_facts['distribution'] == "OracleLinux" or ansible_facts['distribution'] == "CentOS"
  tags:
   - update-redhat-shell

- name: Print output Update by Shell
  ansible.builtin.debug: 
   var: shell_output
  when: ansible_distribution == 'CentOS' or ansible_os_family == 'RedHat' and yum_output.rc != 0 #shell_output.skipped != true
  tags:
   - update-redhat-shell

#- name: Print output of update REDHAT | Debug mode with msg
#  ansible.builtin.debug:
#     msg: "{{ yum_output }}"
#     ignore_errors: yes
#  when: yum_output.rc != 0 and (ansible_facts['distribution'] == "OracleLinux" or ansible_facts['distribution'] == "CentOS")
#  tags:
#   - print-debug-output
#   - update-redhat

- name: Upgrade All Debian | By APT
  ansible.builtin.apt:
    autoremove: true
    name: "*"
    state: latest
    update_cache: yes
  register: apt_output  
  when: ansible_distribution == 'Ubuntu'
  tags:
   - update-debian

- name: Print output of update Debian | Debug mode
  ansible.builtin.debug:
     msg: "{{ apt_output }}"
  when: ansible_distribution == 'Ubuntu' and apt_output.changed != false
  tags:
   - update-debian
...